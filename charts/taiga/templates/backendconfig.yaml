apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  labels:
    backupType: {{ .Values.threefoldVdc.backup | quote }}
data:
  settings.py: |-
    # For the complete list of possible settings and their documentation, see
    # https://docs.djangoproject.com/en/1.11/ref/settings/ and
    # https://github.com/taigaio/taiga-back/tree/stable/settings. Documentation for
    # custom Taiga settings can be found at https://taigaio.github.io/taiga-doc/dist/.
    # Make sure to read https://docs.djangoproject.com/en/1.11/topics/security/ to
    # learn how to secure your deployment.

    #########################################
    ## GENERIC
    #########################################

    #ALLOWED_HOSTS = [
    #    'localhost',
    #]

    #ADMINS = (
    #    ("Admin", "example@example.com"),
    #)

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'taiga',
            'USER': 'taiga',
            'PASSWORD': '{{ .Values.postgresql.postgresqlPassword }}',
            'HOST': '{{ .Values.postgresql.fullnameOverride }}',
            'PORT': '5432',
        }
    }

    # The absolute url is mandatory because attachments
    # urls depends on it. In production should be set
    # something like https://media.taiga.io/.
    #MEDIA_URL = "http://localhost:8080/media/"
    #STATIC_URL = "http://localhost:8080/static/"

    # DO NOT FORGET TO SET THIS!!!
    # You can use this command to generate the key:
    # $ python <<EOF
    # from django.core.management.utils import get_random_secret_key
    # print(get_random_secret_key())
    # EOF
    #SECRET_KEY = ''

    SITES = {
        "api": {
           "scheme": "{{ .Values.protocol }}",
           "domain": "{{ .Values.domain }}",
           "name": "api"
        },
        "front": {
           "scheme": "{{ .Values.protocol }}",
           "domain": "{{ .Values.domain }}",
           "name": "front"
        },
    }

    #SITE_ID = "api"


    #########################################
    ## THROTTLING
    #########################################

    #REST_FRAMEWORK["DEFAULT_THROTTLE_RATES"] = {
    #    "anon-write": "20/min",
    #    "user-write": None,
    #    "anon-read": None,
    #    "user-read": None,
    #    "import-mode": None,
    #    "import-dump-mode": "1/minute",
    #    "create-memberships": None,
    #    "login-fail": None,
    #    "register-success": None,
    #    "user-detail": None,
    #    "user-update": None,
    #}

    # This list should contain:
    #  - Taiga users IDs
    #  - Valid clients IP addresses (X-Forwarded-For header)
    #REST_FRAMEWORK["DEFAULT_THROTTLE_WHITELIST"] = []


    #########################################
    ## MAIL SYSTEM SETTINGS
    #########################################

    #DEFAULT_FROM_EMAIL = "john@doe.com"
    #CHANGE_NOTIFICATIONS_MIN_INTERVAL = 300 #seconds

    # EMAIL SETTINGS EXAMPLE
    #EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    #EMAIL_USE_TLS = False
    #EMAIL_USE_SSL = False # You cannot use both (TLS and SSL) at the same time!
    #EMAIL_HOST = 'localhost'
    #EMAIL_PORT = 25
    #EMAIL_HOST_USER = 'user'
    #EMAIL_HOST_PASSWORD = 'password'

    # GMAIL SETTINGS EXAMPLE
    #EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    #EMAIL_USE_TLS = True
    #EMAIL_HOST = 'smtp.gmail.com'
    #EMAIL_PORT = 587
    #EMAIL_HOST_USER = 'youremail@gmail.com'
    #EMAIL_HOST_PASSWORD = 'yourpassword'


    #########################################
    ## REGISTRATION
    #########################################

    PUBLIC_REGISTER_ENABLED = True

    # LIMIT ALLOWED DOMAINS FOR REGISTER AND INVITE
    # None or [] values in USER_EMAIL_ALLOWED_DOMAINS means allow any domain
    #USER_EMAIL_ALLOWED_DOMAINS = None

    # PUCLIC OR PRIVATE NUMBER OF PROJECT PER USER
    #MAX_PRIVATE_PROJECTS_PER_USER = None # None == no limit
    #MAX_PUBLIC_PROJECTS_PER_USER = None # None == no limit
    #MAX_MEMBERSHIPS_PRIVATE_PROJECTS = None # None == no limit
    #MAX_MEMBERSHIPS_PUBLIC_PROJECTS = None # None == no limit

    # GITHUB SETTINGS
    #GITHUB_URL = "https://github.com/"
    #GITHUB_API_URL = "https://api.github.com/"
    #GITHUB_API_CLIENT_ID = "yourgithubclientid"
    #GITHUB_API_CLIENT_SECRET = "yourgithubclientsecret"


    #########################################
    ## SITEMAP
    #########################################

    # If is True /front/sitemap.xml show a valid sitemap of taiga-front client
    #FRONT_SITEMAP_ENABLED = False
    #FRONT_SITEMAP_CACHE_TIMEOUT = 24*60*60  # In second


    #########################################
    ## FEEDBACK
    #########################################

    # Note: See config in taiga-front too
    #FEEDBACK_ENABLED = True
    #FEEDBACK_EMAIL = "support@taiga.io"


    #########################################
    ## STATS
    #########################################

    #STATS_ENABLED = False
    #FRONT_SITEMAP_CACHE_TIMEOUT = 60*60  # In second


    #########################################
    ## CELERY
    #########################################
    # Set to True to enable celery and work in async mode or False
    # to disable it and work in sync mode. You can find the celery
    # settings in settings/celery.py and settings/celery-local.py
    #CELERY_ENABLED = True


    #########################################
    ## IMPORTERS
    #########################################

    # Configuration for the GitHub importer
    # Remember to enable it in the front client too.
    #IMPORTERS["github"] = {
    #    "active": True, # Enable or disable the importer
    #    "client_id": "XXXXXX_get_a_valid_client_id_from_github_XXXXXX",
    #    "client_secret": "XXXXXX_get_a_valid_client_secret_from_github_XXXXXX"
    #}

    # Configuration for the Trello importer
    # Remember to enable it in the front client too.
    #IMPORTERS["trello"] = {
    #    "active": True, # Enable or disable the importer
    #    "api_key": "XXXXXX_get_a_valid_api_key_from_trello_XXXXXX",
    #    "secret_key": "XXXXXX_get_a_valid_secret_key_from_trello_XXXXXX"
    #}

    # Configuration for the Jira importer
    # Remember to enable it in the front client too.
    #IMPORTERS["jira"] = {
    #    "active": True, # Enable or disable the importer
    #    "consumer_key": "XXXXXX_get_a_valid_consumer_key_from_jira_XXXXXX",
    #    "cert": "XXXXXX_get_a_valid_cert_from_jira_XXXXXX",
    #    "pub_cert": "XXXXXX_get_a_valid_pub_cert_from_jira_XXXXXX"
    #}

    # Configuration for the Asane importer
    # Remember to enable it in the front client too.
    #IMPORTERS["asana"] = {
    #    "active": True, # Enable or disable the importer
    #    "callback_url": "{}://{}/project/new/import/asana".format(SITES["front"]["scheme"],
    #                                                              SITES["front"]["domain"]),
    #    "app_id": "XXXXXX_get_a_valid_app_id_from_asana_XXXXXX",
    #    "app_secret": "XXXXXX_get_a_valid_app_secret_from_asana_XXXXXX"
    #}

  local.py: |-
    from django.core.management.utils import get_random_secret_key

    from .common import *

    # /admin should redirect to /admin/
    APPEND_SLASH = True

    ALLOWED_HOSTS = [
        # Useful for health checks
        '{{ .Values.domain }}',
    ]

    ADMINS = []

    # The default configuration assumes the app is behind a trusted proxy, which is not necessarily
    # true and if it's not, then the default configuration is insecure.
    USE_X_FORWARDED_HOST = False
    SECURE_PROXY_SSL_HEADER = None

    SITES['api']['domain'] = SITES['front']['domain'] = '{{ .Values.domain }}'

    # Prevent secret key reuse
    SECRET_KEY = ''

    MEDIA_ROOT = '/srv/taiga-back/media'
    STATIC_ROOT = '/srv/taiga-back/static'

    MEDIA_URL = "{{ .Values.protocol }}://{{ .Values.domain }}/media/"
    STATIC_URL = "{{ .Values.protocol }}://{{ .Values.domain }}/static/"

    # Helps with cache busting
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

    if 'django.middleware.security.SecurityMiddleware' not in MIDDLEWARE:
        MIDDLEWARE = [
            'django.middleware.security.SecurityMiddleware',
        ] + MIDDLEWARE

    SILENCED_SYSTEM_CHECKS = [
        # X-Frame-Options header is set by the server
        'security.W002',
        # CSRF is covered where necessary without CsrfViewMiddleware
        'security.W003',
        # X-Content-Type-Options header is set by the server
        'security.W006',
        # X-XSS-Protection header is set by the server
        'security.W007',
    ]

    # Load user-provided settings
    try:
        with open('/etc/opt/taiga-back/settings.py') as f:
            exec(f.read())
    except FileNotFoundError:
        pass

    if not SECRET_KEY:
        print((
            '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! WARNING !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n'
            'A valid secret key was not specified in the configuration file. A temporary\n'
            'one will be generated for you, but it will be lost on the application restart.\n'
            'Please, provide a valid secret key as "SECRET_KEY" in the configuration file.\n'
            'See https://docs.djangoproject.com/en/1.11/ref/settings/#std:setting-SECRET_KEY\n'
            'for more details.'
        ), file=sys.stderr)
        SECRET_KEY = get_random_secret_key()
